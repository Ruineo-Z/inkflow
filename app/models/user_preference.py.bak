"""
用户偏好分析模型
用于存储和分析用户的选择偏好，支持个性化推荐
"""
from sqlalchemy import Column, Integer, Float, String, Text, DateTime, ForeignKey, JSON
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship

from app.db.database import Base


class UserPreference(Base):
    """用户偏好分析表"""
    __tablename__ = "user_preferences"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, unique=True)

    # 基础偏好评分 (0.0 - 1.0)
    risk_preference = Column(Float, default=0.5)  # 风险偏好(0保守-1冒险)
    exploration_desire = Column(Float, default=0.5)  # 探索欲望(0低-1高)
    pacing_preference = Column(Float, default=0.5)  # 节奏偏好(0慢-1快)
    relationship_focus = Column(Float, default=0.5)  # 关系关注度(0低-1高)
    action_orientation = Column(Float, default=0.5)  # 行动导向(0被动-1主动)

    # 标签类型偏好分布（JSON格式）
    preferred_action_types = Column(JSON, nullable=True)  # 偏好的行动类型分布
    preferred_narrative_impacts = Column(JSON, nullable=True)  # 偏好的叙事影响分布
    preferred_emotional_tones = Column(JSON, nullable=True)  # 偏好的情感色彩分布

    # 统计信息
    total_choices = Column(Integer, default=0)  # 总选择次数
    confidence_score = Column(Float, default=0.0)  # 偏好数据可信度(0-1)

    # 时间戳
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    last_updated = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())

    # 关系 - 暂时注释掉避免循环引用
    # user = relationship("User", back_populates="preference")

    def __repr__(self):
        return f"<UserPreference(user_id={self.user_id}, total_choices={self.total_choices})>"


class UserChoiceAnalytics(Base):
    """用户选择分析记录表"""
    __tablename__ = "user_choice_analytics"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    chapter_id = Column(Integer, ForeignKey("chapters.id"), nullable=False)
    option_id = Column(Integer, ForeignKey("options.id"), nullable=False)

    # 选择时的上下文信息
    chapter_number = Column(Integer, nullable=False)  # 章节序号
    choice_timestamp = Column(DateTime(timezone=True), server_default=func.now())

    # 选择时的权重因子快照
    risk_weight = Column(Float, nullable=True)  # 选择时的风险权重
    exploration_weight = Column(Float, nullable=True)  # 选择时的探索权重
    pacing_weight = Column(Float, nullable=True)  # 选择时的节奏权重
    action_weight = Column(Float, nullable=True)  # 选择时的行动权重

    # 选择的标签信息（快照，避免关联查询）
    selected_action_type = Column(String(20), nullable=True)
    selected_narrative_impact = Column(String(20), nullable=True)
    selected_emotional_tone = Column(String(20), nullable=True)

    # 选择行为分析
    choice_response_time = Column(Float, nullable=True)  # 选择响应时间（秒）
    alternative_options_viewed = Column(Integer, default=0)  # 查看的其他选项数量

    # 关系
    user = relationship("User")
    chapter = relationship("Chapter")
    option = relationship("Option")

    def __repr__(self):
        return f"<UserChoiceAnalytics(user_id={self.user_id}, chapter_id={self.chapter_id}, option_id={self.option_id})>"