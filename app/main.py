import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import redis.asyncio as redis

from app.api import router as api_router
from app.core.config import settings
from app.db.database import engine
from app.db.migration import run_auto_migration
from app.db.redis import RedisClient

# ÈÖçÁΩÆÊó•Âøó
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Â∫îÁî®ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ"""
    # ÂêØÂä®Êó∂ÊâßË°å
    logger.info("Â∫îÁî®Ê≠£Âú®ÂêØÂä®...")

    # ÊâßË°åÊï∞ÊçÆÂ∫ìËøÅÁßª
    try:
        logger.info("Ê£ÄÊü•Âπ∂ÊâßË°åÊï∞ÊçÆÂ∫ìËøÅÁßª...")
        migration_success = await run_auto_migration(engine)

        if migration_success:
            logger.info("üéâ Êï∞ÊçÆÂ∫ìÂ∑≤ÂáÜÂ§áÂ∞±Áª™")
        else:
            logger.error("‚ùå Êï∞ÊçÆÂ∫ìËøÅÁßªÂ§±Ë¥•")
            raise RuntimeError("Êï∞ÊçÆÂ∫ìËøÅÁßªÂ§±Ë¥•ÔºåÂ∫îÁî®Êó†Ê≥ïÂêØÂä®")
    except Exception as e:
        logger.error(f"‚ùå Êï∞ÊçÆÂ∫ìËøÅÁßªÈîôËØØ: {e}")
        raise

    # ÂàùÂßãÂåñRedisËøûÊé•
    try:
        logger.info("Ê≠£Âú®ËøûÊé•Redis...")
        redis_client = await RedisClient.get_client()
        await redis_client.ping()
        logger.info("‚úÖ RedisËøûÊé•ÊàêÂäü")
    except redis.RedisError as e:
        logger.error(f"‚ùå RedisËøûÊé•Â§±Ë¥•: {e}")
        raise RuntimeError(f"RedisËøûÊé•Â§±Ë¥•ÔºåÂ∫îÁî®Êó†Ê≥ïÂêØÂä®: {e}")
    except Exception as e:
        logger.error(f"‚ùå RedisÂàùÂßãÂåñÈîôËØØ: {e}")
        raise

    logger.info("Â∫îÁî®ÂêØÂä®ÂÆåÊàê")

    yield  # Â∫îÁî®ËøêË°åÊúüÈó¥

    # ÂÖ≥Èó≠Êó∂ÊâßË°å
    logger.info("Â∫îÁî®Ê≠£Âú®ÂÖ≥Èó≠...")
    await RedisClient.close()
    logger.info("RedisËøûÊé•Â∑≤ÂÖ≥Èó≠")


def create_app() -> FastAPI:
    app = FastAPI(
        title=settings.PROJECT_NAME,
        description=settings.PROJECT_DESCRIPTION,
        version=settings.VERSION,
        openapi_url=f"{settings.API_PREFIX}/openapi.json",
        docs_url="/docs",
        redoc_url="/redoc",
        lifespan=lifespan,
    )

    # CORSÈÖçÁΩÆ
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.get_allowed_origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # Ê†πË∑ØÂæÑË∑ØÁî±
    @app.get("/")
    async def root():
        return {
            "message": "Welcome to InkFlow API",
            "version": settings.VERSION,
            "docs": "/docs",
            "redoc": "/redoc"
        }

    # Ê≥®ÂÜåAPIË∑ØÁî±
    app.include_router(api_router, prefix=settings.API_PREFIX)

    return app

app = create_app()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)